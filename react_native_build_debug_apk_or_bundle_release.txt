How to generate one in 3 steps?


Step 1: Go to the root of the project in the terminal and run the below command:


		react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res



Step 2: Go to android directory:


	cd android


Step 3: Now in this android folder, run this command



	./gradlew assembleDebug




For Creating Bundle App



Step 3.1: Generating an upload key#

You can generate a private signing key using keytool. On Windows keytool must be run from 

	C:\Program Files\Java\jdkx.x.x_x\bin.


keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000


This command prompts you for passwords for the keystore and key and for the Distinguished Name fields for your key. It then generates the 
keystore as a file called 

	my-upload-key.keystore.

The keystore contains a single key, valid for 10000 days. The alias is a name that you will use later when signing your app, so remember to take note of the alias.

Step 3.2: Setting up Gradle variables#

Place the my-upload-key.keystore file under the android/app directory in your project folder.

Edit the file 
	~/.gradle/gradle.properties 
or 
	android/gradle.properties, 

and add the following (replace ***** with the correct keystore password, alias and key password),


	MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore
	MYAPP_UPLOAD_KEY_ALIAS=my-key-alias
	MYAPP_UPLOAD_STORE_PASSWORD=*****
	MYAPP_UPLOAD_KEY_PASSWORD=*****


These are going to be global Gradle variables, which we can later use in our Gradle config to sign our app.

Note about security: If you are not keen on storing your passwords in plaintext, and you are running macOS, you can also store your credentials in the Keychain Access app. Then you can skip the two last rows in ~/.gradle/gradle.properties.


Step 3.3: Adding signing config to your app's Gradle config#

The last configuration step that needs to be done is to setup release builds to be signed using upload key. Edit the file android/app/build.gradle in your project folder, and add the signing config,

...

android {
    ...
    defaultConfig { ... }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            ...
            signingConfig signingConfigs.release
        }
    }
}

...


Step 3.4: Generating the release AAB#

Run the following in a terminal:

	cd android
	./gradlew bundleRelease


Gradle's bundleRelease will bundle all the JavaScript needed to run your app into the AAB (Android App Bundle). If you need to change the way the JavaScript bundle and/or drawable resources are bundled (e.g. if you changed the default file/folder names or the general structure of the project), have a look at android/app/build.gradle to see how you can update it to reflect these changes.


Note: Make sure gradle.properties does not include org.gradle.configureondemand=true as that will make the release build skip bundling JS and assets into the app binary.


The generated AAB can be found under 

	android/app/build/outputs/bundle/release/app.aab, 

and is ready to be uploaded to Google Play.


In order for Google Play to accept AAB format the App Signing by Google Play needs to be configured for your application on the Google Play Console. If you are updating an existing app that doesn't use App Signing by Google Play, please check our migration section to learn how to perform that configuration change.





There! you'll find the apk file in the following path:


		yourProject/android/app/build/outputs/apk/debug/app-debug.apk



Now you have your .apk or .aab file generated, install it on your android phone and enjoy!


Step 4: Publishing to other stores#


By default, the generated APK has the native code for both x86 and ARMv7a CPU architectures. This makes it easier to share APKs that run on almost all Android devices. However, this has the downside that there will be some unused native code on any device, leading to unnecessarily bigger APKs.

You can create an APK for each CPU by changing the following line in android/app/build.gradle:

	- ndk {
	-   abiFilters "armeabi-v7a", "x86"
	- }
	- def enableSeparateBuildPerCPUArchitecture = false
	+ def enableSeparateBuildPerCPUArchitecture = true

Upload both these files to markets which support device targeting, such as Google Play and Amazon AppStore, and the users will automatically get the appropriate APK. If you want to upload to other markets, such as APKFiles, which do not support multiple APKs for a single app, change the following line as well to create the default universal APK with binaries for both CPUs.

	- universalApk false  // If true, also generate a universal APK
	+ universalApk true  // If true, also generate a universal APK



								Thank you.